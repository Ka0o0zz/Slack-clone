import Head from "next/head";
import { signIn } from "next-auth/react";
import { Button, Divider, Input } from "@components/index";
import { AuthLayout } from "@layout/index";
import { useForm, SubmitHandler } from "react-hook-form";
import { inputsErrors } from "@helpers/index";
import { useRouter } from "next/router";

/**
 * Define the types for the form inputs
 */
interface IFormInputs {
  email: string;
  password: string;
}

/**
 * Define the Login component as the default export
 */
export default function Login() {
  // Initialize useRouter hook
  const router = useRouter();
  /**
   * Initialize the useForm hook and extract the necessary properties
   */
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInputs>();

  /**
   * Get a custom error validation function from an external helper file
   */
  const { emailValidate } = inputsErrors();

  /**
   * Handles the submission of the login form.
   * @param {IFormInputs} data - Form data to be submitted.
   * @returns {Promise<void>} A promise that resolves when the form is successfully submitted.
   */
  const onSubmit: SubmitHandler<IFormInputs> = async ({
    email,
    password,
  }: IFormInputs) => {
    const signInResponse = await signIn("credentials", {
      redirect: false,
      email: email,
      password: password,
      callbackUrl: "/",
    });

    if (signInResponse?.ok) router.push(signInResponse.url ?? "/auth/login");
  };

  /**
   * Define a function to handle user sign-in using either Google or GitHub
   *
   * @param {object} options - The options for the sign-in.
   * @param {("google"|"github")} options.redirectProvider - The provider to use for sign-in.
   * @returns {void}
   */
  const singInUser = ({
    redirectProvider,
  }: {
    redirectProvider: "google" | "github";
  }): void => {
    signIn(redirectProvider, {
      callbackUrl: "http://localhost:3000/workspaces",
    });
  };

  /**
   * @returns the JSX for the Login component
   */
  return (
    <>
      <Head>
        <title>Login | Slack</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AuthLayout
        h1="Sign in to Slack"
        p={
          <p className="text-slate-900 text-lg leading-7 mb-8 text-center max-w-2xl">
            We suggest using the <strong>email address you use at work.</strong>
          </p>
        }
        href="/auth/register"
        pRecording="New to slack?"
        linkText="Create an account"
      >
        <form className="w-96" onSubmit={handleSubmit(onSubmit)}>
          <Button
            text="Sign In With Google"
            src="/assets/googleIcon.svg"
            alt="google icon"
            onClick={() => singInUser({ redirectProvider: "google" })}
            className="text-sky-600 border-sky-600 mb-4"
          />

          <Button
            text="Sign In With Github"
            src="/assets/githubIcon.svg"
            alt="github icon"
            onClick={() => singInUser({ redirectProvider: "github" })}
            className="text-slate-900 border-slate-900"
          />

          <Divider text="OR" />

          <Input
            type="email"
            placeholder="name@slack.com"
            className="mb-4"
            error={errors.email ? true : false}
            errorMessage={errors.email?.message}
            {...register("email", emailValidate)}
          />

          <Input
            type="password"
            className="mb-4"
            placeholder="password"
            error={errors.password ? true : false}
            errorMessage={errors.password?.message}
            {...register("password", {
              required: "Password is required",
            })}
          />

          <Button
            text="Sign In With Email"
            className="text-white bg-fuchsia-900 border-none"
            type="submit"
          />
        </form>
      </AuthLayout>
    </>
  );
}
