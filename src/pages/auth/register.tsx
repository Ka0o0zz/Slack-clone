import { Button, Input } from "@components/index";
import { AuthLayout } from "@layout/index";
import Head from "next/head";
import { useForm, SubmitHandler } from "react-hook-form";

interface IFormInputs {
  email: string;
  password: string;
  confirmPassword: string;
}

export default function Register() {
  const {
    register,
    handleSubmit,
    getValues,
    formState: { errors },
  } = useForm<IFormInputs>();
  const onSubmit: SubmitHandler<IFormInputs> = (data) => console.log(data);
  return (
    <>
      <Head>
        <title>Register | Slack</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AuthLayout
        h1="First, enter your email"
        p={
          <p className="text-slate-900 text-lg leading-7 mb-8 text-center max-w-2xl">
            We suggest using the <strong>email address you use at work.</strong>
          </p>
        }
        href="/auth/login"
        pRecording="Already using Slack?"
        linkText="Sign in to an existing workspace"
      >
        <form className="w-96" onSubmit={handleSubmit(onSubmit)}>
          <Input
            type="email"
            placeholder="name@slack.com"
            className="mb-4"
            error={errors.email ? true : false}
            errorMessage={errors.email?.message}
            {...register("email", {
              required: "Please fill in your email.",
              pattern: {
                value: /\S+@\S+\.\S+/,
                message: "Invalid email address",
              },
            })}
          />

          <Input
            type="password"
            className="mb-4"
            placeholder="password"
            error={errors.password ? true : false}
            errorMessage={errors.password?.message}
            {...register("password", {
              required: "Password is required",
            })}
          />

          <Input
            type="password"
            placeholder="confirm password"
            className="mb-4"
            error={errors.confirmPassword ? true : false}
            errorMessage={errors.confirmPassword?.message}
            {...register("confirmPassword", {
              required: "Password is required",
              validate: (value) =>
                value === getValues("password") || "Passwords do not match",
            })}
          />

          <Button
            text="Continue"
            className="text-white bg-fuchsia-900 border-none"
            type="submit"
          />

          <div className="bg-slate-100 rounded-lg py-3 px-6 mt-3">
            <p className="text-base text-slate-700">
              By clicking continue you indicate that you have read and accept
              our <strong>Terms and Conditions</strong>
            </p>
          </div>
        </form>
      </AuthLayout>
    </>
  );
}
